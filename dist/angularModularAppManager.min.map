{"version":3,"sources":["angularModularAppManager.js"],"names":["angularModularAppManager","angular","onCreateAngularModule","angularModule","undefined","manager","appModule","loadedCallback","onAddNewModule","newModuleCreationFunction","currentLoadedCallback","createAngularModule","addNewModule","console","error","window"],"mappings":"AAqDA,GAAIA,0BAA2B,SAAWC,GACtC,YAoBA,SAASC,GAAsBC,GAC3B,GAAuBC,SAAlBD,GAAmD,OAAlBA,EAClC,KAAM,qDAGgB,QAAtBE,EAAQC,YAKkB,gBAApB,GACND,EAAQC,UAAYH,EAEpBE,EAAQC,UAAYH,IAMO,kBAArB,IACNI,EAAeF,EAAQC,YAI/B,QAASE,GAAeC,GAEpB,GAA0B,OAAtBJ,EAAQC,UACRG,EAA0BJ,EAAQC,eAElC,IAAgC,kBAArB,GAAiC,CACxC,GAAII,GAAwBH,CAC5BA,GAAiB,SAAUD,GACvBI,EAAsBJ,GACtBG,EAA0BH,QAG9BC,GAAiBE,EArD7B,GAAIJ,IAEAC,UAAW,KAEXK,oBAAqBT,EAErBU,aAAcJ,GAGdD,EAAiB,IAiDrB,OA7CgB,QAAZN,GACAY,QAAQC,MAAM,wFA4CXT,GACRU,OAAgB,SAAK","file":"angularModularAppManager.min.js","sourcesContent":["/*\r\n * Angular Modular App Manager\r\n * (c) 2016 Felipe Ceotto\r\n * License: MIT\r\n * \r\n * Version: 0.9.0\r\n * \r\n * This module allows AngularJS applications to be created and loaded in a\r\n * modular fashion, eliminating the risk of loading scripts relevant to the\r\n * application in the incorrect order, while also promoting best practices\r\n * for using the JavaScript Module Pattern.\r\n * \r\n * For great advice on the module pattern, read\r\n * http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\r\n * \r\n * Usage:\r\n * Add this file to your HTML in a way that it is loaded after AngularJS and\r\n * before your application files, for example:\r\n *     <script src=\"scripts/angular/angular.js\"></script>\r\n *     <script src=\"scripts/AngularModularApp/angularModularApp.js\"></script>\r\n *     <script src=\"scripts/app.js\"></script>\r\n *     <script src=\"scripts/app.service.js\"></script>\r\n *     <script src=\"scripts/app.controller.js\"></script>\r\n * \r\n * When bootstrapping your AngularJS application with angular.module, you\r\n * should wrap the call in a function that returns the angular module then\r\n * pass that function as the argument of the createAngularModule function\r\n * such as:\r\n *     function createMyAngularApp() {\r\n *         return angular.module('myApp', []);\r\n *     }\r\n * \r\n *     angularModularAppManager.createAngularModule(createMyAngularApp);\r\n * \r\n * When creating the other parts of your application such as services,\r\n * directives or controllers, where you would normally write something like\r\n * angular.module('myApp').controller(...) you should wrap the call in a\r\n * function that has the angular module as a parameter and pass that function\r\n * as the argument of the addNewModule function, such as:\r\n *     function createMyAppController(angularModule) {\r\n *         angularModule.controller('MyAppController', ['$scope', 'MyAppService', function ($scope, MyAppService) {\r\n *         }]);\r\n *     }\r\n * \r\n *     angularModularAppManager.addNewModule(createMyAppController);\r\n * \r\n * That's everything, there is no need to do anything else. This manager will\r\n * ensure that the function passed in to createAngularModule is called first\r\n * then all the other modules will be called, regardless of the order the files\r\n * have been loaded by the browser.\r\n * \r\n * TODO: Add functionality to allow this manager to manage more than a single AngularJS app.\r\n */\r\nvar angularModularAppManager = (function (angular) {\r\n    'use strict';\r\n    \r\n    // Define module that will be exposed.\r\n    var manager = {\r\n        // The appModule property returns the angular module when one has been created and is the equivalent of angular.module['myApp']. \r\n        appModule: null,\r\n        // The createAngularModule function receives a function as its parameter that should have instructions to create an angular module and return it. \r\n        createAngularModule: onCreateAngularModule,\r\n        // The addNewModule function receives a function as its parameter that should take an angular module as its parameter and use it to add services, controllers or directives to that module. \r\n        addNewModule: onAddNewModule\r\n    };\r\n\r\n    var loadedCallback = null;\r\n\r\n    // Checks for the presence of AngularJS and logs an error if it is not present.\r\n    // While AngularJS is not actually used by this module this is done for convenience in here.\r\n    if (angular === null) {\r\n        console.error(\"AngularJS has not been loaded correctly, this application will not work as intended.\");\r\n    }\r\n\r\n    function onCreateAngularModule(angularModule) {\r\n        if ((angularModule === undefined) || (angularModule === null)) {\r\n            throw \"Value of angularModule cannot be undefined or null.\";\r\n        }\r\n\r\n        if (manager.appModule !== null) {\r\n            return;\r\n        }\r\n\r\n        // If an angular module object has been passed in stores it, but if a function to create one has been passed in call it.\r\n        if (typeof(angularModule) === 'object') {\r\n            manager.appModule = angularModule;\r\n        } else if (typeof(angularModule === 'function')) {\r\n            manager.appModule = angularModule();\r\n        } else {\r\n            throw \"Value of angularModule is not an object or a function.\";\r\n        }\r\n\r\n        // If any other modules for services, controllers or directives have been added call those.\r\n        if (typeof(loadedCallback) === 'function') {\r\n            loadedCallback(manager.appModule);\r\n        }\r\n    }\r\n\r\n    function onAddNewModule(newModuleCreationFunction) {\r\n        // If an angular module has already been added just calls the new module's create function, otherwise add it to the callback to be called later.\r\n        if (manager.appModule !== null) {\r\n            newModuleCreationFunction(manager.appModule);\r\n        } else {\r\n            if (typeof (loadedCallback) === 'function') {\r\n                var currentLoadedCallback = loadedCallback;\r\n                loadedCallback = function (appModule) {\r\n                    currentLoadedCallback(appModule);\r\n                    newModuleCreationFunction(appModule);\r\n                }\r\n            } else {\r\n                loadedCallback = newModuleCreationFunction;\r\n            }\r\n        }\r\n    }\r\n\r\n    return manager;\r\n})(window['angular'] || null);"]}